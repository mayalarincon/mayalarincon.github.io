induction: theory
begin

  sum(n: nat): recursive nat =
    if n = 0 then 0 else n + sum(n - 1) endif
  measure n

  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %

  closed_form: theorem
    ∀(n: nat): sum(n) = (n * (n + 1)) / 2

  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %

  even(n:nat): INDUCTIVE bool =
    n = 0 OR (n > 1 AND even(n - 2))
    
  odd(n:nat): INDUCTIVE bool =
    n = 1 OR (n > 1 AND odd(n - 2))

  even_odd: lemma
    FORALL (n: nat): even(n) => odd(n + 1)

  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %
  %

  % Exercises

  % 1) Use induction to prove that the factorial of any number strictly greater than 1 is even. 
  %    HINTS: The predicate even? is defined in the prelude.
  %           Define the factorial function recursively or peek at ints@factorial
  
  % 2) Use induction to prove that ∀(n: nat): n! ≥ n
  
  % 3) Prove that for all natural number n, if even(n) holds, then even?(n) holds.
  %    NOTE: The predicate even is the inductive definition above.

IMPORTING ints@factorial

parity_sum_evens : CONJECTURE FORALL(m,n : nat) : even(m) ∧ even(n) => even (m+n)

factorial_is_even : CONJECTURE  FORALL(n : nat) : n >= 2 =>  even( factorial(n) )
    
end induction
