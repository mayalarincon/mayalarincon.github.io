(pred_gcd
 (gcd_nat 0
  (gcd_nat-1 nil 3649752525
   ("" (skolem 1 ("m" "n" "k"))
    (("" (expand "gcd")
      (("" (flatten)
        (("" (inst -3 1)
          (("" (split)
            (("1" (assert) nil nil)
             ("2" (hide -)
              (("2" (expand "divides")
                (("2" (inst 1 "m") (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("3" (hide -)
              (("3" (expand "divides")
                (("3" (inst 1 "n") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (divides const-decl "bool" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (gcd_commute_TCC1 0
  (gcd_commute_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (gcd_commute 0
  (gcd_commute-1 nil 3649754968
   ("" (skolem 1 ("m" "n" "k"))
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (skolem 1 "p")
                (("3" (inst -3 "p")
                  (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "gcd")
          (("2" (flatten)
            (("2" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (skolem 1 "p")
                (("3" (inst -3 "p")
                  (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (gcd_divides_left 0
  (gcd_divides_left-1 nil 3649784745
   ("" (skolem 1 ("m" "n" "k"))
    (("" (flatten) (("" (expand "gcd") (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)) shostak))
 (gcd_divides_right 0
  (gcd_divides_right-1 nil 3649785039
   ("" (skolem 1 ("m" "n" "k"))
    (("" (flatten) (("" (expand "gcd") (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)) shostak))
 (gcd_abs_TCC1 0
  (gcd_abs_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (gcd_abs 0
  (gcd_abs-1 nil 3649785071
   ("" (skolem 1 ("m" "n" "k"))
    (("" (expand gcd)
      (("" (split)
        (("1" (flatten)
          (("1" (split)
            (("1" (hide-all-but (-1 1))
              (("1" (expand "divides")
                (("1" (skolem -1 "x")
                  (("1" (expand "abs")
                    (("1" (inst 1 "IF m < 0 THEN -x ELSE x ENDIF")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-2 1))
              (("2" (expand "divides")
                (("2" (skolem -1 "x")
                  (("2" (expand "abs")
                    (("2" (inst 1 "IF n < 0 THEN -x ELSE x ENDIF")
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 "p")
              (("3" (flatten)
                (("3" (inst -5 "p")
                  (("3" (split)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (expand "divides")
                        (("2" (skolem -1 "x")
                          (("2" (expand "abs")
                            (("2"
                              (inst 1 "IF m < 0 THEN -x ELSE x ENDIF")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-2 1))
                      (("3" (expand "divides")
                        (("3" (skolem -1 "x")
                          (("3" (expand "abs")
                            (("3"
                              (inst 1 "IF n < 0 THEN -x ELSE x ENDIF")
                              (("3"
                                (lift-if)
                                (("3"
                                  (prop)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (hide-all-but (-1 1))
              (("1" (expand "divides")
                (("1" (skolem -1 "x")
                  (("1" (expand "abs")
                    (("1" (inst 1 "IF m < 0 THEN -x ELSE x ENDIF")
                      (("1" (lift-if)
                        (("1" (prop) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-2 1))
              (("2" (expand "divides")
                (("2" (skolem -1 "x")
                  (("2" (expand "abs")
                    (("2" (inst 1 "IF n < 0 THEN -x ELSE x ENDIF")
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 "p")
              (("3" (flatten)
                (("3" (inst -5 "p")
                  (("3" (split)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (expand "divides")
                        (("2" (skolem -1 "x")
                          (("2" (expand "abs")
                            (("2"
                              (inst 1 "IF m < 0 THEN -x ELSE x ENDIF")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-2 1))
                      (("3" (expand "divides")
                        (("3" (skolem -1 "x")
                          (("3" (expand "abs")
                            (("3"
                              (inst 1 "IF n < 0 THEN -x ELSE x ENDIF")
                              (("3"
                                (lift-if)
                                (("3"
                                  (prop)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (divides const-decl "bool" divides nil))
   shostak))
 (gcd_is_gcd_plus_TCC1 0
  (gcd_is_gcd_plus_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (gcd const-decl "bool" pred_gcd nil))
   nil))
 (gcd_is_gcd_plus 0
  (gcd_is_gcd_plus-1 nil 3649785782
   ("" (skolem 1 ("m" "n" "k"))
    (("" (flatten)
      (("" (expand "gcd")
        (("" (flatten)
          (("" (split)
            (("1" (hide -3)
              (("1" (expand "divides")
                (("1" (skolem -1 "x")
                  (("1" (skolem -2 "y")
                    (("1" (inst 1 "x + y") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (skolem 1 "p")
              (("3" (flatten)
                (("3" (inst -5 "p")
                  (("3" (assert)
                    (("3" (hide -3 -4)
                      (("3" (expand "divides")
                        (("3" (skolem -1 "x")
                          (("3" (skolem -2 "y")
                            (("3" (inst 2 "x - y")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (divides const-decl "bool" divides nil)
    (gcd const-decl "bool" pred_gcd nil))
   shostak))
 (gcd_is_gcd_mod_TCC1 0
  (gcd_is_gcd_mod_TCC1-1 nil 3649802195 ("" (subtype-tcc) nil nil) nil
   nil))
 (gcd_is_gcd_mod_TCC2 0
  (gcd_is_gcd_mod_TCC2-1 nil 3649802195 ("" (subtype-tcc) nil nil)
   ((divides const-decl "bool" divides nil)
    (gcd const-decl "bool" pred_gcd nil))
   nil))
 (gcd_is_gcd_mod 0
  (gcd_is_gcd_mod-1 nil 3649802197
   ("" (skolem 1 ("m" "a" "k"))
    (("" (flatten)
      (("" (expand "gcd")
        (("" (flatten)
          (("" (split)
            (("1" (hide -3)
              (("1" (expand "divides")
                (("1" (skeep)
                  (("1" (skolem -2 "y")
                    (("1" (typepred "rem(a)(m)")
                      (("1" (skeep)
                        (("1" (inst 1 "x - y * q")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (skeep 1)
              (("3" (hide -3 -4)
                (("3" (inst -3 "p")
                  (("3" (prop)
                    (("3" (expand "divides")
                      (("3" (skeep)
                        (("3" (skolem -2 "y")
                          (("3" (typepred "rem(a)(m)")
                            (("3" (skeep)
                              (("3"
                                (inst 1 "x + y * q")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (gcd const-decl "bool" pred_gcd nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil))
   shostak)))

