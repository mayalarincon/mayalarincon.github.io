(gcd (gcd_TCC1 0
      (gcd_TCC1-1 nil 3398619525
       ("" (skolem!)
        (("" (flatten)
          (("" (case "m!1 >= 0")
            (("1" (case "n!1 >= 0")
              (("1" (expand abs) (("1" (grind) nil nil)) nil)
               ("2" (expand abs) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (case "n!1 >= 0")
              (("1" (expand abs) (("1" (grind) nil nil)) nil)
               ("2" (expand abs) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((int_plus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (gcd_TCC2 0
      (gcd_TCC2-1 nil 3398619525
       ("" (skolem!)
        (("" (flatten)
          (("" (expand abs 5 (1 4)) (("" (assert) nil nil)) nil)) nil))
        nil)
       ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (gcd_eff_TCC1 0
      (gcd_eff_TCC1-1 nil 3403450102 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (gcd_eff_TCC2 0
      (gcd_eff_TCC2-1 nil 3403450102 ("" (subtype-tcc) nil nil)
       ((mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil))
       nil))
     (gcd_eff_TCC3 0
      (gcd_eff_TCC3-1 nil 3403450457 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (gcd_eff_TCC4 0
      (gcd_eff_TCC4-1 nil 3403450457 ("" (termination-tcc) nil nil)
       ((real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil))
       nil))
     (gcd_switching_TCC1 0
      (gcd_switching_TCC1-1 nil 3621935404 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (gcd_switching_TCC2 0
      (gcd_switching_TCC2-1 nil 3621935404
       ("" (skeep)
        (("" (expand lex2) (("" (assert) (("" (grind) nil nil)) nil))
          nil))
        nil)
       ((lex2 const-decl "ordinal" lex2 nil)
        (< def-decl "bool" ordinals nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (gcd_switching_TCC3 0
      (gcd_switching_TCC3-1 nil 3621935404 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (gcd_switching_TCC4 0
      (gcd_switching_TCC4-1 nil 3621935404
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (< def-decl "bool" ordinals nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (lex2 const-decl "ordinal" lex2 nil))
       nil))
     (gcd_commute 0
      (gcd_commute-1 nil 3399307681
       ("" (expand gcd)
        (("" (assert)
          (("" (skolem!)
            (("" (case "abs(n!1) = abs(m!1)")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (hide 1)
                  (("2" (case "n!1 = 0 OR m!1 = 0")
                    (("1" (prop)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (hide-all-but 3)
                          (("2" (case "abs(n!1) > abs(m!1)")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (> const-decl "bool" reals nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (gcd def-decl "nat" gcd nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (int_plus_int_is_int application-judgement "int" integers nil))
       shostak))
     (gcd_divides_left 0
      (gcd_divides_left-1 nil 3399821695
       ("" (measure-induct+ "abs(m) + abs (n)" ("m" "n"))
        (("" (case "x!1 >= 0")
          (("1" (case "x!2 >= 0")
            (("1" (expand gcd 1)
              (("1" (expand abs 1)
                (("1" (assert)
                  (("1" (case "x!1 = x!2")
                    (("1" (assert)
                      (("1" (expand divides)
                        (("1" (inst 1 "1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "x!1 = 0")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand divides)
                              (("1"
                                (inst 2 "0")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "x!2 = 0")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand divides)
                              (("1"
                                (inst 3 "1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "x!2 > x!1")
                            (("1" (assert)
                              (("1"
                                (inst -4 "x!1" "x!2 - x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand abs -4)
                                    (("1"
                                      (rewrite gcd_commute -4)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (copy -3)
                                (("2"
                                  (inst -4 "x!1-x!2" "x!2")
                                  (("2"
                                    (inst -1 "x!2" "x!1-x!2")
                                    (("2"
                                      (expand abs -1)
                                      (("2"
                                        (expand abs -4)
                                        (("2"
                                          (rewrite gcd_commute -1)
                                          (("2"
                                            (name-replace
                                             "myterm"
                                             "gcd(x!1 - x!2, x!2)")
                                            (("2"
                                              (expand divides)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst 5 "x!3 + x!4")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand gcd 2)
              (("2" (expand abs 2)
                (("2" (assert)
                  (("2" (case "x!1 = 0")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (expand divides)
                            (("1" (inst 2 "0") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "x!1 > -x!2")
                      (("1" (assert)
                        (("1" (hide -1 -2 1 2)
                          (("1" (copy -1)
                            (("1" (inst -1 "x!1 - -x!2" "-x!2")
                              (("1"
                                (inst -2 "-x!2" "x!1 - -x!2")
                                (("1"
                                  (expand abs)
                                  (("1"
                                    (expand divides)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst 1 "x!3 + x!4")
                                        (("1"
                                          (rewrite gcd_commute -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "x!1 = -x!2")
                          (("1" (assert)
                            (("1" (expand divides 4)
                              (("1"
                                (inst 4 "1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst -2 "x!1" "-x!2 - x!1")
                              (("2"
                                (expand abs -2)
                                (("2"
                                  (rewrite gcd_commute -2)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!2 >= 0")
            (("1" (expand gcd 2)
              (("1" (expand abs 2)
                (("1" (assert)
                  (("1" (case "-x!1 = x!2")
                    (("1" (assert)
                      (("1" (expand divides 2)
                        (("1" (inst 2 -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "x!2 = 0")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (expand divides 3)
                            (("1" (inst 3 -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "-x!1 > x!2")
                        (("1" (assert)
                          (("1" (hide-all-but (4 -3))
                            (("1" (copy -1)
                              (("1"
                                (inst -1 "-x!1 - x!2" x!2)
                                (("1"
                                  (inst -2 x!2 "-x!1 - x!2")
                                  (("1"
                                    (expand abs)
                                    (("1"
                                      (rewrite gcd_commute -2)
                                      (("1"
                                        (expand divides)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst 1 "-x!3 - x!4")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (rewrite gcd_commute 5)
                            (("2" (inst -2 "-x!1" "x!2 - -x!1")
                              (("2"
                                (expand abs -2)
                                (("2"
                                  (hide-all-but (-2 5))
                                  (("2"
                                    (expand divides)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "-x!3")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand gcd 3)
              (("2" (expand abs 3)
                (("2" (assert)
                  (("2" (case "-x!1 = -x!2")
                    (("1" (assert)
                      (("1" (hide-all-but 3)
                        (("1" (expand divides)
                          (("1" (inst 1 -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "-x!1 > -x!2")
                      (("1" (assert)
                        (("1" (hide-all-but (-2 4))
                          (("1" (copy -1)
                            (("1" (inst -1 "-x!1 - -x!2" "-x!2")
                              (("1"
                                (inst -2 "-x!2" "-x!1 - -x!2")
                                (("1"
                                  (expand abs)
                                  (("1"
                                    (expand divides)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (rewrite gcd_commute -2)
                                        (("1"
                                          (inst 1 "-x!3 - x!4")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (rewrite gcd_commute 5)
                          (("2" (inst -1 "-x!1" " -x!2 - -x!1")
                            (("2" (expand abs -1)
                              (("2"
                                (expand divides)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst 5 "-x!3")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int_plus_int_is_int application-judgement "int" integers nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_times_even_is_even application-judgement "even_int"
         integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (gcd_commute formula-decl nil gcd nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (> const-decl "bool" reals nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (divides const-decl "bool" divides nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (gcd def-decl "nat" gcd nil)
        (wf_nat formula-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (naturalnumber type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       shostak))
     (gcd_divides_right 0
      (gcd_divides_right-1 nil 3399310048
       ("" (skosimp*)
        (("" (rewrite gcd_commute)
          (("" (rewrite gcd_divides_left) nil nil)) nil))
        nil)
       ((gcd_commute formula-decl nil gcd nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (gcd_divides_left formula-decl nil gcd nil))
       shostak))
     (gcd_abs 0
      (gcd_abs-1 nil 3401024127
       ("" (expand abs)
        (("" (assert)
          (("" (skolem!)
            (("" (case "abs(m!1)=abs(n!1)")
              (("1" (grind) nil nil)
               ("2" (case m!1<0)
                (("1" (assert)
                  (("1" (case n!1<0)
                    (("1" (assert)
                      (("1" (expand gcd)
                        (("1" (expand abs 1)
                          (("1" (expand abs 2 (10 9))
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand gcd)
                        (("2" (expand abs 2)
                          (("2" (expand abs 3 (11 10))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (gcd def-decl "nat" gcd nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (< const-decl "bool" reals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil))
       shostak))
     (gcd_is_gcd_plus 0
      (gcd_is_gcd_plus-1 nil 3401573050
       ("" (assert)
        (("" (grind)
          (("" (case "abs(m!1)=abs(n!1)")
            (("1" (grind) nil nil)
             ("2" (expand gcd 2 2)
              (("2" (case "abs(m!1 + n!1) = abs(n!1)")
                (("1" (grind) nil nil)
                 ("2" (replace 1)
                  (("2" (case m!1<0)
                    (("1" (case n!1<0)
                      (("1" (case "abs(m!1 + n!1) > abs(n!1)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil)
                       ("2" (case "abs(m!1 + n!1) > abs(n!1)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (case "n!1<0")
                      (("1" (case "abs(m!1 + n!1) > abs(n!1)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil)
                       ("2" (case "abs(m!1 + n!1) > abs(n!1)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (even_times_int_is_even application-judgement "even_int"
         integers nil)
        (gcd def-decl "nat" gcd nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_even_is_even application-judgement "even_int" integers
         nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (>= const-decl "bool" reals nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil))
       shostak))
     (divides_nat_imp_less 0
      (divides_nat_imp_less-1 nil 3402838851
       ("" (lemma divisor_smaller)
        (("" (skolem!)
          (("" (inst -1 k!1 b!1) (("" (assert) nil nil)) nil)) nil))
        nil)
       ((posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (divisor_smaller formula-decl nil divides nil))
       shostak))
     (divides_imp_div_abs 0
      (divides_imp_div_abs-1 nil 3402842511
       ("" (expand divides)
        (("" (skosimp*)
          (("" (expand abs)
            (("" (assert)
              (("" (case "m!1<0")
                (("1" (inst 1 -x!1) (("1" (assert) nil nil)) nil)
                 ("2" (inst 2 x!1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (divides const-decl "bool" divides nil))
       shostak))
     (gcd_of_posnats_is_maximum 0
      (gcd_of_posnats_is_maximum-1 nil 3403052854
       ("" (measure-induct+ "abs(m) + abs(n)" ("m" "n"))
        (("" (expand gcd 1)
          (("" (expand abs 1)
            (("" (skeep)
              (("" (lift-if)
                (("" (prop)
                  (("1" (hide -2)
                    (("1" (lemma divides_nat_imp_less)
                      (("1" (inst -1 x!1 k) (("1" (prop) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand abs -2)
                    (("2" (assert)
                      (("2" (inst -2 "x!1-x!2" x!2)
                        (("2" (assert)
                          (("2" (inst -2 k)
                            (("2" (prop)
                              (("2"
                                (lemma divides_diff)
                                (("2"
                                  (inst -1 x!2 x!1 k)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand abs -1)
                    (("3" (assert)
                      (("3" (inst -1 "x!2-x!1" x!1)
                        (("3" (inst -1 k)
                          (("3" (assert)
                            (("3" (lemma divides_diff)
                              (("3"
                                (inst -1 x!1 x!2 k)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
         real_defs nil)
        (divides_nat_imp_less formula-decl nil gcd nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (divides_diff formula-decl nil divides nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (divides const-decl "bool" divides nil)
        (<= const-decl "bool" reals nil) (gcd def-decl "nat" gcd nil)
        (wf_nat formula-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (naturalnumber type-eq-decl nil naturalnumbers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       shostak))
     (gcd_is_maximum 0
      (gcd_is_maximum-1 nil 3402906620
       ("" (lemma divides_imp_div_abs)
        (("" (copy -1)
          (("" (assert)
            (("" (lemma gcd_of_posnats_is_maximum)
              (("" (assert)
                (("" (skolem!)
                  (("" (prop)
                    (("1" (case n!1=0)
                      (("1" (case m!1<0)
                        (("1" (inst -3 -m!1 n!1 k!1)
                          (("1" (hide -4 -5)
                            (("1" (lemma divides_opposite)
                              (("1"
                                (inst -1 m!1 k!1)
                                (("1"
                                  (lemma gcd_abs)
                                  (("1"
                                    (inst -1 m!1 n!1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand gcd)
                            (("2" (assert)
                              (("2"
                                (hide -4 1)
                                (("2"
                                  (inst -3 m!1 k!1)
                                  (("2"
                                    (expand abs)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (simplify)
                                        (("2"
                                          (lemma divisor_smaller)
                                          (("2"
                                            (inst -1 k!1 -m!1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -4)
                            (("3" (inst -3 k!1 m!1)
                              (("1"
                                (expand gcd)
                                (("1"
                                  (expand abs)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 m!1 n!1 k!1)
                          (("1" (grind) nil nil)
                           ("2" (hide -3)
                            (("2" (inst -2 m!1 k!1)
                              (("2"
                                (lemma divisor_smaller)
                                (("2"
                                  (inst -1 k!1 m!1)
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -3)
                            (("3" (inst -2 m!1 k!1)
                              (("3"
                                (lemma divisor_smaller)
                                (("3"
                                  (inst -1 k!1 m!1)
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "abs(m!1)" "abs(n!1)" k!1)
                        (("1" (inst -2 m!1 k!1)
                          (("1" (inst -3 n!1 k!1)
                            (("1" (lemma gcd_abs)
                              (("1"
                                (inst -1 m!1 n!1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 2))
                          (("2" (assert) nil nil)) nil)
                         ("3" (hide-all-but (1 3))
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (case m!1=0)
                      (("1" (inst -2 m!1 "abs(n!1)" k!1)
                        (("1" (inst -3 n!1 k!1)
                          (("1" (hide -4)
                            (("1" (rewrite gcd_abs 2)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 2))
                          (("2" (assert) nil nil)) nil)
                         ("3" (inst -2 n!1 k!1)
                          (("3" (hide -3)
                            (("3" (lemma divisor_smaller)
                              (("3"
                                (inst -1 k!1 "abs(n!1)")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "abs(m!1)" "abs(n!1)" k!1)
                        (("1" (inst -2 m!1 k!1)
                          (("1" (inst -3 n!1 k!1)
                            (("1" (rewrite gcd_abs 3)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 3))
                          (("2" (assert) nil nil)) nil)
                         ("3" (hide-all-but (1 2))
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((gcd_of_posnats_is_maximum formula-decl nil gcd nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (>= const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (m!1 skolem-const-decl "int" gcd nil)
        (> const-decl "bool" reals nil)
        (n!1 skolem-const-decl "int" gcd nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (divides_opposite formula-decl nil divides nil)
        (gcd_abs formula-decl nil gcd nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (gcd def-decl "nat" gcd nil)
        (divides const-decl "bool" divides nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (divisor_smaller formula-decl nil divides nil)
        (< const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (divides_imp_div_abs formula-decl nil gcd nil))
       shostak))
     (gcd_is_correct 0
      (gcd_is_correct-1 nil 3473497933
       ("" (lemma gcd_divides_left)
        (("" (lemma gcd_divides_right)
          (("" (assert)
            (("" (lemma gcd_is_maximum)
              (("" (inst?)
                (("" (assert)
                  (("" (skolem!)
                    (("" (prop)
                      (("1" (hide-all-but (-3 1))
                        (("1" (inst -1 n!1 m!1) nil nil)) nil)
                       ("2" (hide-all-but (-3 1))
                        (("2" (inst -1 m!1 n!1)
                          (("2" (rewrite gcd_commute -1) nil nil))
                          nil))
                        nil)
                       ("3" (skolem!)
                        (("3" (lemma gcd_is_maximum)
                          (("3" (hide -2)
                            (("3" (inst -1 m!1 n!1 k!1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("4" (inst -2 m!1 n!1)
                        (("4" (rewrite gcd_commute 1) nil nil)) nil)
                       ("5" (inst -2 n!1 m!1) nil nil)
                       ("6" (hide -1)
                        (("6" (lemma gcd_is_maximum)
                          (("6" (skolem!)
                            (("6" (inst -1 m!1 n!1 k!1)
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((gcd_divides_right formula-decl nil gcd nil)
        (gcd_is_maximum formula-decl nil gcd nil)
        (gcd_commute formula-decl nil gcd nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (gcd_divides_left formula-decl nil gcd nil))
       shostak))
     (rem_b_is_rem_minus_b 0
      (rem_b_is_rem_minus_b-1 nil 3404057200
       ("" (skolem!)
        (("" (rewrite same_remainder 1)
          (("" (expand divides)
            (("" (instantiate * ("1")) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ((int_minus_int_is_int application-judgement "int" integers nil)
        (same_remainder formula-decl nil modulo_arithmetic nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (posint_times_posint_is_posint application-judgement "posint"
         integers nil)
        (divides const-decl "bool" divides nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil))
       shostak))
     (gcd_is_gcd_mod1 0
      (gcd_is_gcd_mod1-1 nil 3404057374
       ("" (measure-induct+ "m" "m")
        (("" (expand gcd 1 1)
          (("" (expand abs)
            (("" (skolem!)
              (("" (case x!1=b!1)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (rewrite rem_self 1)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case x!1=0)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1" (replace -1)
                        (("1" (rewrite rem_zero 2)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case x!1>b!1)
                    (("1" (inst -2 "x!1-b!1")
                      (("1" (inst -2 b!1)
                        (("1" (assert)
                          (("1" (rewrite rem_b_is_rem_minus_b 3) nil
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma rem_mod2)
                        (("2" (inst -1 b!1 x!1)
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (rewrite gcd_is_gcd_plus 4)
                                (("2" (rewrite gcd_commute 4) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
         real_defs nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (rem_zero formula-decl nil modulo_arithmetic nil)
        (gcd_commute formula-decl nil gcd nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (gcd_is_gcd_plus formula-decl nil gcd nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (rem_mod2 formula-decl nil modulo_arithmetic nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (x!1 skolem-const-decl "nat" gcd nil)
        (b!1 skolem-const-decl "posnat" gcd nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (rem_b_is_rem_minus_b formula-decl nil gcd nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (rem_self formula-decl nil modulo_arithmetic nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers
         nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
             modulo_arithmetic nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (mod nonempty-type-eq-decl nil euclidean_division nil)
        (gcd def-decl "nat" gcd nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (wf_nat formula-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (naturalnumber type-eq-decl nil naturalnumbers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       shostak))
     (rem_b_is_b_minus_rem_minus 0
      (rem_b_is_b_minus_rem_minus-1 nil 3404057432
       ("" (skolem!)
        (("" (prop)
          (("1" (lemma rem_def)
            (("1" (inst -1 b!1 -m!1 "b!1-rem(b!1)(m!1)")
              (("1" (assert)
                (("1" (typepred "rem(b!1)(m!1)")
                  (("1" (skolem!)
                    (("1" (inst 1 "-q!1-1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "rem(b!1)(m!1)")
                (("2" (hide (-2 2)) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "rem(b!1)(m!1)")
            (("2" (rewrite rem_def2 2)
              (("2" (rewrite divides_opposite 2)
                (("2" (lemma rem_def2)
                  (("2" (inst -1 b!1 m!1 0) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (m!1 skolem-const-decl "int" gcd nil)
        (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
             modulo_arithmetic nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (mod nonempty-type-eq-decl nil euclidean_division nil)
        (< const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (b!1 skolem-const-decl "posnat" gcd nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (>= const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (rem_def formula-decl nil modulo_arithmetic nil)
        (rem_def2 formula-decl nil modulo_arithmetic nil)
        (divides_opposite formula-decl nil divides nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil))
       shostak))
     (gcd_is_gcd_mod2 0
      (gcd_is_gcd_mod2-1 nil 3404057487
       ("" (skosimp*)
        (("" (lemma gcd_abs)
          (("" (inst -1 "- m!1" "b!1")
            (("" (replace -1 1)
              (("" (assert)
                (("" (expand abs 1)
                  (("" (assert)
                    (("" (lemma gcd_is_gcd_mod1)
                      (("" (inst -1 "b!1" "--m!1")
                        (("" (replace -1 1)
                          (("" (lemma gcd_abs)
                            (("" (inst -1 "- rem(b!1)(m!1)" "b!1")
                              ((""
                                (assert)
                                ((""
                                  (case "--m!1 = m!1")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand abs -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "rem(b!1)(m!1) > 0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "rem(b!1)(m!1) = --rem(b!1)(m!1)")
                                                (("1"
                                                  (replace -1 -2 rl)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -3 1 rl)
                                                      (("1"
                                                        (lemma
                                                         gcd_is_gcd_plus)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "-rem(b!1)(m!1)"
                                                           "b!1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               rem_b_is_b_minus_rem_minus)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "b!1"
                                                                 "m!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rem(b!1)(m!1) = 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   rem_b_is_b_minus_rem_minus)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "b!1"
                                                     "m!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((gcd_abs formula-decl nil gcd nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (gcd_is_gcd_mod1 formula-decl nil gcd nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
             modulo_arithmetic nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (mod nonempty-type-eq-decl nil euclidean_division nil)
        (< const-decl "bool" reals nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (rem_b_is_b_minus_rem_minus formula-decl nil gcd nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (gcd_is_gcd_plus formula-decl nil gcd nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
         real_defs nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil))
       shostak))
     (gcd_is_gcd_mod 0
      (gcd_is_gcd_mod-1 nil 3404057542
       ("" (skolem!)
        (("" (case m!1<0)
          (("1" (lemma gcd_is_gcd_mod2)
            (("1" (inst -1 b!1 -m!1)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("2" (lemma gcd_is_gcd_mod1)
            (("2" (inst -1 b!1 m!1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ((int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (>= const-decl "bool" reals nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (m!1 skolem-const-decl "int" gcd nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (gcd_is_gcd_mod2 formula-decl nil gcd nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (gcd_is_gcd_mod1 formula-decl nil gcd nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil))
       shostak))
     (gcd_is_distributive_TCC1 0
      (gcd_is_distributive_TCC1-1 nil 3502360846
       ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (divides const-decl "bool" divides nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil))
       nil))
     (gcd_is_distributive_TCC2 0
      (gcd_is_distributive_TCC2-1 nil 3502360846
       ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (divides const-decl "bool" divides nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil))
       nil))
     (gcd_is_distributive 0
      (gcd_is_distributive-1 nil 3502360863
       ("" (measure-induct+ "abs(m)+abs(n)+x" (m n x))
        (("1" (lemma abs_div)
          (("1" (copy -1)
            (("1" (inst -1 x!3 x!1)
              (("1" (inst -2 x!3 x!2)
                (("1" (case "abs(x!1)=abs(x!2)")
                  (("1" (hide -4) (("1" (grind) nil nil)) nil)
                   ("2" (case "abs(x!1)=0")
                    (("1" (hide -4) (("1" (grind) nil nil)) nil)
                     ("2" (case "abs(x!2)=0")
                      (("1" (hide -4) (("1" (grind) nil nil)) nil)
                       ("2" (lemma divides_imp_div_abs)
                        (("2" (copy -1)
                          (("2" (inst -1 x!1 x!3)
                            (("2" (inst -2 x!2 x!3)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma both_sides_div_pos_gt1)
                                  (("2"
                                    (lemma divides_diff)
                                    (("2"
                                      (hide (-8 -9))
                                      (("2"
                                        (case "abs(x!1)>abs(x!2)")
                                        (("1"
                                          (inst
                                           -8
                                           "abs(x!1)-abs(x!2)"
                                           "abs(x!2)"
                                           x!3)
                                          (("1"
                                            (expand abs -8 (1 4))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "abs(x!2)"
                                                 "abs(x!1)"
                                                 x!3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     x!3
                                                     "abs(x!1)"
                                                     "abs(x!2)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           -7
                                           "abs(x!2)-abs(x!1)"
                                           "abs(x!1)"
                                           x!3)
                                          (("2"
                                            (expand abs -7 (1 4))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -1
                                                 "abs(x!1)"
                                                 "abs(x!2)"
                                                 x!3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     x!3
                                                     "abs(x!2)"
                                                     "abs(x!1)")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-3 2)) (("2" (grind) nil nil)) nil)
         ("3" (hide (-3 2)) (("3" (grind) nil nil)) nil)
         ("4" (hide (-3 2)) (("4" (grind) nil nil)) nil)
         ("5" (hide (-3 2)) (("5" (grind) nil nil)) nil)
         ("6" (hide (-3 2)) (("6" (grind) nil nil)) nil)
         ("7" (hide (-3 2)) (("7" (grind) nil nil)) nil)
         ("8" (hide 2) (("8" (grind) nil nil)) nil)
         ("9" (hide 2) (("9" (grind) nil nil)) nil))
        nil)
       ((abs_div formula-decl nil real_props nil)
        (nonzero_real nonempty-type-eq-decl nil reals nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers
         nil)
        (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
         real_defs nil)
        (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
         rationals nil)
        (minus_rat_is_rat application-judgement "rat" rationals nil)
        (rat_abs_is_nonneg application-judgement
         "{r: nonneg_rat | r >= q}" real_defs nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (both_sides_div_pos_gt1 formula-decl nil real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (rat_minus_rat_is_rat application-judgement "rat" rationals
         nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (posreal nonempty-type-eq-decl nil real_types nil)
        (divides_diff formula-decl nil divides nil)
        (divides_imp_div_abs formula-decl nil gcd nil)
        (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
         rationals nil)
        (rat_times_rat_is_rat application-judgement "rat" rationals
         nil)
        (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (gcd def-decl "nat" gcd nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (/ const-decl "[numfield, nznum -> numfield]" number_fields
           nil)
        (nznum nonempty-type-eq-decl nil number_fields nil)
        (/= const-decl "boolean" notequal nil)
        (divides const-decl "bool" divides nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (rat_div_nzrat_is_rat application-judgement "rat" rationals
         nil)
        (wf_nat formula-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (naturalnumber type-eq-decl nil naturalnumbers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       shostak))
     (ndiv_divide 0
      (ndiv_divide-1 nil 3502449209
       ("" (skolem!)
        (("" (flatten)
          (("" (copy -1)
            (("" (expand divides -2)
              (("" (typepred "ndiv(i!1,y!1)")
                (("" (lemma rem_def2)
                  (("" (inst -1 y!1 i!1 0) (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((divides const-decl "bool" divides nil)
        (rem_def2 formula-decl nil modulo_arithmetic nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posrat_div_posrat_is_posrat application-judgement "posrat"
         rationals nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nil application-judgement "upto(n)" modulo_arithmetic nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (mod nonempty-type-eq-decl nil euclidean_division nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
             modulo_arithmetic nil)
        (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
         modulo_arithmetic nil)
        (<= const-decl "bool" reals nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil))
       shostak))
     (gcd_eff_same_gcd 0
      (gcd_eff_same_gcd-1 nil 3403450102
       ("" (measure-induct+ "abs(m) + abs(n)" ("m" "n"))
        (("" (expand gcd_eff 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand gcd 1) (("1" (assert) nil nil)) nil)
               ("2" (replace -1)
                (("2" (assert)
                  (("2" (expand gcd 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("3" (replace -1)
                (("3" (assert)
                  (("3" (expand gcd 1) (("3" (propax) nil nil)) nil))
                  nil))
                nil)
               ("4" (inst -2 "rem(abs(x!2))(abs(x!1))" "x!2")
                (("4" (assert)
                  (("4" (typepred "rem(abs(x!2))(abs(x!1))")
                    (("4" (expand abs -4 1)
                      (("4" (lemma gcd_is_gcd_mod)
                        (("4" (inst -1 "abs(x!2)" "abs(x!1)")
                          (("4" (rewrite gcd_abs -5)
                            (("4" (expand abs -5 3)
                              (("4"
                                (rewrite gcd_abs 1)
                                (("4"
                                  (assert)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (inst -1 "rem(abs(x!1))(abs(x!2))" "abs(x!1)")
                (("5" (assert)
                  (("5" (typepred "rem(abs(x!1))(abs(x!2))")
                    (("5" (expand abs -3 1)
                      (("5" (expand abs -3 3)
                        (("5" (lemma gcd_is_gcd_mod)
                          (("5" (inst -1 "abs(x!1)" "abs(x!2)")
                            (("5" (rewrite gcd_abs -4)
                              (("5"
                                (expand abs -4 4)
                                (("5"
                                  (expand abs -1 3)
                                  (("5"
                                    (expand abs -1 5)
                                    (("5"
                                      (rewrite gcd_abs 2)
                                      (("5" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((int_plus_int_is_int application-judgement "int" integers nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (gcd_abs formula-decl nil gcd nil)
        (gcd_is_gcd_mod formula-decl nil gcd nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (mod nonempty-type-eq-decl nil euclidean_division nil)
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
             modulo_arithmetic nil)
        (minus_odd_is_odd application-judgement "odd_int" integers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (gcd_eff def-decl "nat" gcd nil) (gcd def-decl "nat" gcd nil)
        (wf_nat formula-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (naturalnumber type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       shostak))
     (gcd_eff_is_correct 0
      (gcd_eff_is_correct-1 nil 3473614959
       ("" (lemma gcd_eff_same_gcd)
        (("" (lemma gcd_is_correct)
          (("" (assert)
            (("" (skolem!)
              (("" (inst -1 m!1 n!1)
                (("" (inst -2 m!1 n!1)
                  (("" (replace -2 1) (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((gcd_is_correct formula-decl nil gcd nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (gcd_eff_same_gcd formula-decl nil gcd nil))
       shostak))
     (gcd_switching_same_gcd 0
      (gcd_switching_same_gcd-2 nil 3649778529
       ("" (measure-induct "lex2(m,n)" ("m" "n"))
        (("" (skosimp)
          (("" (expand gcd_switching 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (replace -1)
                  (("1" (expand gcd 1)
                    (("1" (hide -2)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (typepred x!2) (("1" (grind) nil nil))
                            nil)
                           ("2" (typepred x!2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand gcd 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -3) (("1" (grind) nil nil)) nil)
                       ("2" (inst?)
                        (("2" (prop)
                          (("1" (expand gcd -1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 -2 1))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 5)
                        (("3" (lemma gcd_commute)
                          (("3"
                            (inst -3 "abs(x!1)" "abs(x!2) - abs(x!1)")
                            (("1" (prop)
                              (("1"
                                (inst
                                 -2
                                 "abs(x!1)"
                                 "abs(x!2) - abs(x!1)")
                                (("1"
                                  (replaces -2)
                                  (("1"
                                    (expand gcd_switching 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "abs(x!1) <  abs(x!2) - abs(x!1)")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (case "x!2 - x!1 < x!1")
                                          (("1"
                                            (expand gcd_switching 3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (-2 3))
                                                (("1"
                                                  (typepred x!1 x!2)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "x!2 - x!1 = x!1")
                                            (("1"
                                              (expand gcd_switching 4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-2 4))
                                                  (("1"
                                                    (typepred x!1 x!2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 3))
                                              (("2"
                                                (typepred x!1 x!2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand gcd 2)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (hide -2) (("1" (grind) nil nil)) nil)
                       ("2" (inst?)
                        (("1" (prop)
                          (("1" (typepred (x!1 x!2))
                            (("1" (hide-all-but (-1 -2 -3 1))
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("3" (inst?)
                        (("1" (prop)
                          (("1" (typepred x!1 x!2)
                            (("1" (grind) nil nil)) nil)
                           ("2" (hide 3) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (minus_int_is_int application-judgement "int" integers nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (gcd_commute formula-decl nil gcd nil)
        (mult_divides2 application-judgement "(divides(m))" divides
         nil)
        (mult_divides1 application-judgement "(divides(n))" divides
         nil)
        (even_times_int_is_even application-judgement "even_int"
         integers nil)
        (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (< const-decl "bool" reals nil)
        (x!1 skolem-const-decl "nat" gcd nil)
        (x!2 skolem-const-decl "posnat" gcd nil)
        (- const-decl "[numfield -> numfield]" number_fields nil)
        (nonneg_real nonempty-type-eq-decl nil real_types nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
             real_defs nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (minus_nzint_is_nzint application-judgement "nzint" integers
         nil)
        (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
         real_defs nil)
        (int_abs_is_nonneg application-judgement
         "{j: nonneg_int | j >= i}" real_defs nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (gcd_switching def-decl "nat" gcd nil)
        (gcd def-decl "nat" gcd nil)
        (well_founded_le formula-decl nil ordinals nil)
        (< def-decl "bool" ordinals nil)
        (lex2 const-decl "ordinal" lex2 nil)
        (ordinal nonempty-type-eq-decl nil ordinals nil)
        (ordinal? def-decl "bool" ordinals nil)
        (ordstruct type-decl nil ordstruct_adt nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (measure_induction formula-decl nil measure_induction nil)
        (well_founded? const-decl "bool" orders nil)
        (pred type-eq-decl nil defined_types nil))
       nil)
      (gcd_switching_same_gcd-1 nil 3649776218 ("" (postpone) nil nil)
       nil shostak))
     (gcd_switching_is_correct 0
      (gcd_switching_is_correct-1 nil 3621969448
       ("" (skeep)
        (("" (rewrite gcd_switching_same_gcd)
          (("" (rewrite gcd_is_correct) nil nil)) nil))
        nil)
       ((gcd_switching_same_gcd formula-decl nil gcd nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (gcd_is_correct formula-decl nil gcd nil))
       shostak)))

