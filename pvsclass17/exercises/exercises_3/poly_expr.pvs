%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%     Exercises on Induction, Recursion, and Iteration (Abstract Data Types)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

poly_expr : THEORY
BEGIN

  IMPORTING PolyExpr

  % Evaluation function of PolyExpr.
  % Notice that because of the currified definition,
  % eval(pexpr) has the type [real->real]
  eval(pexpr:PolyExpr)(x:real) : RECURSIVE real =
    CASES pexpr OF
      CONST(k)     : k,
      X            : x,
      ADD(pe1,pe2) : eval(pe1)(x) + eval(pe2)(x),
      SUB(pe1,pe2) : eval(pe1)(x) - eval(pe2)(x),
      MUL(pe1,pe2) : eval(pe1)(x) * eval(pe2)(x),
      POW(pe,n)    : (eval(pe)(x))^n 
    ENDCASES
  MEASURE pexpr BY <<      

  % This function computes the symbolic derivative of a PolyExpr
  dx(pexpr:PolyExpr): RECURSIVE PolyExpr =
    CASES pexpr OF
      CONST(k)     : CONST(0),
      X            : CONST(1),
      ADD(pe1,pe2) : ADD(dx(pe1),dx(pe2)),
      SUB(pe1,pe2) : SUB(dx(pe1),dx(pe2)),
      MUL(pe1,pe2) : ADD(MUL(pe1,dx(pe2)),MUL(dx(pe1),pe2)),
      POW(pe,n)    : IF n = 1 THEN dx(pe) 
                     ELSE  MUL(MUL(CONST(n),POW(pe,n-1)),dx(pe))
		     ENDIF
    ENDCASES
  MEASURE pexpr BY <<

  %
  % Exercise 1: Write a stament representing "the derivative of (x+3)^2-5x is
  % 2x+1" and prove it.
  %

  IMPORTING analysis@continuous_lambda[real]

  %
  % Exercise 2: Prove the judgement eval_continuous
  %

  eval_continuous : RECURSIVE JUDGEMENT
    eval(pexpr:PolyExpr) HAS_TYPE continuous_fun

  IMPORTING analysis@deriv_domains,
            analysis@derivatives_lam[real],
	    analysis@chain_rule[real,real]
            
  %
  % Exercise 3: Prove the judgement eval_differentiable
  %

  eval_differentiable : RECURSIVE JUDGEMENT
    eval(pexpr:PolyExpr) HAS_TYPE deriv_fun

  %
  % Homework: Prove the lemma eval_differentiable
  %

  eval_derivative : LEMMA
    FORALL(pexpr:PolyExpr):
      eval(dx(pexpr)) = deriv(eval(pexpr)) 

END poly_expr
