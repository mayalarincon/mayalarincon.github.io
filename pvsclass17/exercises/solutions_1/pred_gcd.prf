(pred_gcd
 (gcd_posnat 0
  (gcd_posnat-1 nil 3649752525
   ("" (skolem 1 ("m" "n" "k"))
    (("" (expand "gcd")
      (("" (flatten)
        (("" (inst -3 1)
          (("" (split)
            (("1" (assert) nil nil)
             ("2" (hide -)
              (("2" (expand "divides")
                (("2" (inst 1 "m") (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("3" (hide -)
              (("3" (expand "divides")
                (("3" (inst 1 "n") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (divides const-decl "bool" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (gcd_unique 0
  (gcd_unique-1 nil 3711729204
   ("" (skeep)
    (("" (expand "gcd")
      (("" (prop)
        (("" (inst -3 "k1")
          (("" (inst -6 "k") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (gcd_commutes_TCC1 0
  (gcd_commutes_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (gcd_commutes 0
  (gcd_commutes-2 nil 3684080993
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (split)
            (("1" (flatten) nil nil) ("2" (flatten) nil nil)
             ("3" (flatten)
              (("3" (skolem! 1)
                (("3" (hide -1 -2)
                  (("3" (inst -1 "p!1")
                    (("3" (flatten)
                      (("3" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "gcd")
          (("2" (split)
            (("1" (flatten) nil nil) ("2" (flatten) nil nil)
             ("3" (flatten)
              (("3" (skolem! 1)
                (("3" (hide -1 -2)
                  (("3" (inst -1 "p!1")
                    (("3" (flatten)
                      (("3" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (gcd_commutes-1 nil 3649754968
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (split)
            (("1" (flatten) nil nil) ("2" (flatten) nil nil)
             ("3" (flatten)
              (("3" (skolem! 1)
                (("3" (hide -1 -2)
                  (("3" (inst -1 "p!1")
                    (("3" (flatten)
                      (("3" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (gcd_divides_left 0
  (gcd_divides_left-1 nil 3649784745
   ("" (skolem 1 ("m" "n" "k"))
    (("" (flatten) (("" (expand "gcd") (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)) shostak))
 (gcd_divides_right 0
  (gcd_divides_right-1 nil 3649785039
   ("" (skolem 1 ("m" "n" "k"))
    (("" (flatten) (("" (expand "gcd") (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)) shostak))
 (gcd_abs_TCC1 0
  (gcd_abs_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (gcd_abs 0
  (gcd_abs-6 "kljadsf" 3684083083
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (case "n < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (inst -5 "p")
                  (("3" (hide -3 -4)
                    (("3" (split)
                      (("1" (propax) nil nil)
                       ("2" (hide -2)
                        (("2" (expand "divides")
                          (("2" (skeep)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (inst 1 "-x")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst 1 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1)
                        (("3" (expand "divides")
                          (("3" (skeep)
                            (("3" (expand "abs")
                              (("3"
                                (lift-if)
                                (("3"
                                  (split)
                                  (("1"
                                    (inst 1 "-x")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst 1 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "gcd")
          (("2" (flatten -1)
            (("2" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (inst 1 "-x") (("1" (assert) nil nil))
                            nil)
                           ("2" (inst 1 "x") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (inst 1 "-x") (("1" (assert) nil nil))
                            nil)
                           ("2" (inst 1 "x") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (inst -5 "p")
                  (("3" (hide -3 -4)
                    (("3" (split)
                      (("1" (propax) nil nil)
                       ("2" (hide -2)
                        (("2" (expand "divides")
                          (("2" (skeep)
                            (("2" (expand "abs")
                              (("2"
                                (case "m < 0")
                                (("1"
                                  (inst 1 "-x")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "x")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1)
                        (("3" (expand "divides")
                          (("3" (skeep)
                            (("3" (expand "abs")
                              (("3"
                                (case "n < 0")
                                (("1"
                                  (inst 1 "-x")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "x")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd const-decl "bool" pred_gcd nil)
    (divides const-decl "bool" divides nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (gcd_abs-5 "kljadsf" 3684082928
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (case "n < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (inst -5 "p")
                  (("3" (hide -3 -4)
                    (("3" (split)
                      (("1" (propax) nil nil)
                       ("2" (hide -2)
                        (("2" (expand "divides")
                          (("2" (skeep)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (inst 1 "-x")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst 1 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1)
                        (("3" (expand "divides")
                          (("3" (skeep)
                            (("3" (expand "abs")
                              (("3"
                                (lift-if)
                                (("3"
                                  (split)
                                  (("1"
                                    (inst 1 "-x")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst 1 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (gcd_abs-4 "kljadsf" 3684082856
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (case "n < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (inst -5 "p")
                  (("3" (hide -3 -4)
                    (("3" (split)
                      (("1" (propax) nil nil)
                       ("2" (hide -2)
                        (("2" (expand "divides")
                          (("2" (skeep)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (inst 1 "-x")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst 1 "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)
  (gcd_abs-3 nil 3684082310
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil)))
                         ("2" (inst 2 "x")
                          (("2" (assert) nil)))))))))))))
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (case "n < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil)))
                         ("2" (inst 2 "x")
                          (("2" (assert) nil)))))))))))))
               ("3" (postpone) nil)))))))))
       ("2" (postpone) nil))))
    nil)
   nil nil)
  (gcd_abs-2 nil 3684082213
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil)))
                         ("2" (inst 2 "x")
                          (("2" (assert) nil)))))))))))))
               ("2" (hide -1 -3)
                (("2" (expand "divides")
                  (("2" (skeep -1)
                    (("2" (expand "abs")
                      (("2" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil)))
                         ("2" (inst 2 "x")
                          (("2" (assert) nil)))))))))))))
               ("3" (postpone) nil)))))))))
       ("2" (postpone) nil))))
    nil)
   nil nil)
  (gcd_abs-1 nil 3649785071
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "gcd")
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (hide -2 -3)
                (("1" (expand "divides")
                  (("1" (skeep -1)
                    (("1" (expand "abs")
                      (("1" (case "m < 0")
                        (("1" (inst 1 "-x") (("1" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "x") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (gcd_plus_TCC1 0
  (gcd_plus_TCC1-1 nil 3649752497 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (gcd_plus 0
  (gcd_plus-2 nil 3711077146
   ("" (skeep)
    (("" (prop)
      (("1" (expand "gcd")
        (("1" (prop)
          (("1" (hide -3)
            (("1" (expand "divides")
              (("1" (skeep)
                (("1" (skolem -2 "y")
                  (("1" (inst 1 "x + y") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -2)
            (("2" (skeep)
              (("2" (inst -3 "p")
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (hide 2)
                    (("2" (expand "divides")
                      (("2" (skeep)
                        (("2" (skolem -2 "y")
                          (("2" (inst 1 "x - y")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "gcd")
        (("2" (prop)
          (("1" (hide -3)
            (("1" (expand "divides")
              (("1" (skeep)
                (("1" (skolem -2 "y")
                  (("1" (inst 1 "x - y") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -2)
            (("2" (skeep)
              (("2" (inst -3 "p")
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (hide 2)
                    (("2" (expand "divides")
                      (("2" (skeep)
                        (("2" (skolem -2 "y")
                          (("2" (inst 1 "x + y")
                            (("2" (assert) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gcd const-decl "bool" pred_gcd nil))
   nil)
  (gcd_plus-1 nil 3649785782
   ("" (skeep)
    (("" (expand "gcd")
      (("" (prop)
        (("1" (hide -3)
          (("1" (expand "divides")
            (("1" (skeep)
              (("1" (skolem -2 "y")
                (("1" (inst 1 "x + y") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 -2)
          (("2" (skeep)
            (("2" (inst -3 "p")
              (("2" (split)
                (("1" (propax) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "divides")
                    (("2" (skeep)
                      (("2" (skolem -2 "y")
                        (("2" (inst 1 "x - y") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (gcd_mod_TCC1 0
  (gcd_mod_TCC1-1 nil 3649802195 ("" (subtype-tcc) nil nil) nil nil))
 (gcd_mod_TCC2 0
  (gcd_mod_TCC2-1 nil 3649802195 ("" (subtype-tcc) nil nil) nil nil))
 (gcd_mod 0
  (gcd_mod-2 nil 3711077222
   ("" (skeep)
    (("" (prop)
      (("1" (expand "gcd")
        (("1" (flatten)
          (("1" (split)
            (("1" (hide -3)
              (("1" (typepred "rem(a)(m)")
                (("1" (skeep -2)
                  (("1" (expand "divides")
                    (("1" (skeep -3)
                      (("1" (skolem -4 "y")
                        (("1" (inst 1 "x-y*q") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide -1 -2)
              (("3" (skeep)
                (("3" (inst -3 "p")
                  (("3" (split)
                    (("1" (propax) nil nil)
                     ("2" (typepred "rem(a)(m)")
                      (("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "divides")
                            (("2" (skeep -3)
                              (("2"
                                (skolem -4 "y")
                                (("2"
                                  (inst 1 "x+y*q")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "gcd")
        (("2" (flatten)
          (("2" (split)
            (("1" (hide -3)
              (("1" (typepred "rem(a)(m)")
                (("1" (skeep -2)
                  (("1" (expand "divides")
                    (("1" (skeep -3)
                      (("1" (skolem -4 "y")
                        (("1" (inst 1 "x + y*q")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide -1 -2)
              (("3" (skeep)
                (("3" (inst -3 "p")
                  (("3" (split)
                    (("1" (propax) nil nil)
                     ("2" (typepred "rem(a)(m)")
                      (("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "divides")
                            (("2" (skeep -3)
                              (("2"
                                (skolem -4 "y")
                                (("2"
                                  (inst 1 "x-y*q")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (gcd const-decl "bool" pred_gcd nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil)
  (gcd_mod-1 nil 3649802197
   ("" (skeep)
    (("" (expand "gcd")
      (("" (flatten)
        (("" (split)
          (("1" (hide -3)
            (("1" (typepred "rem(a)(m)")
              (("1" (skeep -2)
                (("1" (expand "divides")
                  (("1" (skeep -3)
                    (("1" (skolem -4 "y")
                      (("1" (inst 1 "x-y*q") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (hide -1 -2)
            (("3" (skeep)
              (("3" (inst -3 "p")
                (("3" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "rem(a)(m)")
                    (("2" (hide 2)
                      (("2" (skeep)
                        (("2" (expand "divides")
                          (("2" (skeep -3)
                            (("2" (skolem -4 "y")
                              (("2"
                                (inst 1 "x+y*q")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (euclidean_gcd_TCC1 0
  (euclidean_gcd_TCC1-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (euclidean_gcd_TCC2 0
  (euclidean_gcd_TCC2-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (euclidean_gcd_TCC3 0
  (euclidean_gcd_TCC3-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (euclidean_gcd_TCC4 0
  (euclidean_gcd_TCC4-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (euclidean_gcd_TCC5 0
  (euclidean_gcd_TCC5-1 nil 3711729013 ("" (termination-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (euclidean_gcd_TCC6 0
  (euclidean_gcd_TCC6-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (euclidean_gcd_TCC7 0
  (euclidean_gcd_TCC7-1 nil 3711729013 ("" (subtype-tcc) nil nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (euclidean_gcd_TCC8 0
  (euclidean_gcd_TCC8-1 nil 3711729013 ("" (termination-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (euclidean_gcd_is_correct 0
  (euclidean_gcd_is_correct-3 nil 3712055045
   ("" (measure-induct "abs(m)+abs(n)" ("m" "n"))
    (("" (skeep)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "euclidean_gcd" -1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (hide -3)
                  (("1" (rewrite "gcd_abs")
                    (("1" (expand "gcd")
                      (("1" (replace -2 1 rl)
                        (("1" (replace -1 1 rl)
                          (("1" (prop)
                            (("1" (expand "divides")
                              (("1"
                                (inst 1 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides")
                              (("2"
                                (inst 1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (typepred "x_2")
                              (("3"
                                (case "x_2 = 0")
                                (("1"
                                  (hide +)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "divides")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "abs(x_2)")
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (case
                                                 "NOT abs(x_2) = 0")
                                                (("1"
                                                  (replaces -2)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (case
                                                       "p = 0 OR x = 0")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        (("2"
                                                          (lemma
                                                           "pos_times_le")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "p")
                                                                      (("2"
                                                                        (lemma
                                                                         "div_mult_pos_le1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "p"
                                                                           "x"
                                                                           "p")
                                                                          (("2"
                                                                            (rewrite
                                                                             "div_simp")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (replaces -1 2 rl)
                      (("2" (replace -1 2 rl)
                        (("2" (hide -)
                          (("2" (expand "abs" 1 1)
                            (("2" (expand "gcd")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (inst
                                     1
                                     "IF x_1 < 0 THEN -1 ELSE 1 ENDIF")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "divides")
                                  (("2"
                                    (inst 1 0)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (expand "divides")
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (grind)
                                          (("1"
                                            (case "x!1 = 0")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (typepred "p")
                                              (("2"
                                                (lemma "neg_times_lt")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "-x!1"
                                                         "p")
                                                        (("1"
                                                          (rewrite
                                                           "div_simp")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("2"
                                                        (lemma
                                                         "div_mult_pos_lt2")
                                                        (("2"
                                                          (lemma
                                                           "div_mult_neg_lt2")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "pos_times_le")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (case "p = 0")
                                                      (("1"
                                                        (replaces)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "div_mult_pos_le1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!1"
                                                           "p")
                                                          (("2"
                                                            (rewrite
                                                             "div_simp")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "p=0")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("2"
                                                        (rewrite
                                                         "div_simp")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "p")
                                                  (("3"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("3"
                                                        (rewrite
                                                         "div_simp")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (typepred "p")
                                                  (("4"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("4"
                                                        (rewrite
                                                         "div_simp")
                                                        (("4"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (typepred "p")
                                                  (("5"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("5"
                                                        (rewrite
                                                         "div_simp")
                                                        (("5"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (typepred "p")
                                                  (("6"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("6"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("6"
                                                        (rewrite
                                                         "div_simp")
                                                        (("6"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replaces -1)
                  (("3" (assert)
                    (("3" (replace -1 2 rl)
                      (("3" (hide -)
                        (("3" (expand "gcd")
                          (("3" (prop)
                            (("1" (expand "divides")
                              (("1"
                                (inst 1 0)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides")
                              (("2"
                                (inst
                                 1
                                 "IF x_2 < 0 THEN -1 ELSE 1 ENDIF")
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (expand "divides")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (replaces -1)
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("1"
                                              (typepred "p")
                                              (("1"
                                                (typepred "x")
                                                (("1"
                                                  (case "p=0")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (lemma
                                                       "neg_times_lt")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "-x"
                                                                 "p")
                                                                (("1"
                                                                  (rewrite
                                                                   "div_simp")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "-x"
                                                               "p")
                                                              (("1"
                                                                (rewrite
                                                                 "div_simp")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      -6))
                                                                    (("1"
                                                                      (case
                                                                       "x < -1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (case
                                                                       "x = 1")
                                                                      (("1"
                                                                        (replaces)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (lemma
                                                         "neg_times_lt")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "p=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x=0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "pos_times_lt")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-
                                                                          8))
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p"
                                                                             "x"
                                                                             "p")
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_simp")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (case
                                                                                   "x=1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("5"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_2)" "abs(x_1)" "k")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "gcd_commutes")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 4))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 5)
                      (("2" (typepred "rem(abs(x_1))(abs(x_2))")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_1)" "abs(x_2)" "k")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 6))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 6)
                      (("2" (typepred "rem(abs(x_2))(abs(x_1))")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "euclidean_gcd" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3)
                  (("1" (typepred "x_2")
                    (("1" (case "x_2 = 0")
                      (("1" (replace -1)
                        (("1" (hide-all-but (-2 1))
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (rewrite "gcd_abs" -3)
                        (("2" (replace -2 -3 rl)
                          (("2" (hide -1 -2)
                            (("2" (expand "abs" 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "gcd_posnat")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "gcd")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (inst -4 "-x_2")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               " pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         " both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "x"
                                                                           "1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -3)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "gcd_posnat")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "gcd")
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (hide -3)
                                                  (("2"
                                                    (inst -3 "x_2")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               "pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "1"
                                                                           "x")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (typepred "x_2")
                    (("2" (prop)
                      (("2" (replaces -1)
                        (("2" (assert)
                          (("2" (hide 3)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma "gcd_posnat")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gcd")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -5 "-x_1")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x>0")
                                                        (("1"
                                                          (lemma
                                                           "neg_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "x = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = -1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x < -1")
                                                              (("1"
                                                                (case
                                                                 "k * x < -k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "-1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (inst 1 "-1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst 1 0)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "gcd_posnat")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "gcd")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (inst -3 "x_1")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x < 0")
                                                        (("1"
                                                          (lemma
                                                           "pos_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "x=0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = 1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x>1")
                                                              (("1"
                                                                (case
                                                                 "k < k * x")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (inst 1 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand
                                                       "divides")
                                                      (("3"
                                                        (inst 1 0)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -3)
                  (("3" (typepred "x_2")
                    (("3" (prop)
                      (("3" (replaces -1)
                        (("3" (assert)
                          (("3" (hide 3)
                            (("3" (expand "abs")
                              (("3"
                                (lift-if)
                                (("3"
                                  (prop)
                                  (("1"
                                    (lemma "gcd_posnat")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gcd")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -5 "-x_2")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x>0")
                                                        (("1"
                                                          (lemma
                                                           "neg_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "x = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = -1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x < -1")
                                                              (("1"
                                                                (case
                                                                 "k * x < -k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "-1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (inst 1 0)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst 1 "-1")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "gcd_posnat")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "gcd")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (inst -3 "x_2")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x < 0")
                                                        (("1"
                                                          (lemma
                                                           "pos_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "x=0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = 1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x>1")
                                                              (("1"
                                                                (case
                                                                 "k < k * x")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (inst 1 0)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand
                                                       "divides")
                                                      (("3"
                                                        (inst 1 1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -3)
                        (("1" (rewrite "gcd_commutes" -3)
                          (("1" (rewrite "gcd_mod" -3)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -2)
                        (("1" (rewrite "gcd_mod" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide -1 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (gcd_mod formula-decl nil pred_gcd nil)
    (gcd_commutes formula-decl nil pred_gcd nil)
    (x_2 skolem-const-decl "{n | NOT x_1 = 0 OR NOT n = 0}" pred_gcd
     nil)
    (x_1 skolem-const-decl "int" pred_gcd nil)
    (pos_times_lt formula-decl nil real_props nil)
    (p skolem-const-decl "int" pred_gcd nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (x!1 skolem-const-decl "int" pred_gcd nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_mult_neg_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pos_times_le formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_simp formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gcd_abs formula-decl nil pred_gcd nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (neg_times_gt formula-decl nil real_props nil)
    (k skolem-const-decl "nat" pred_gcd nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (gcd_posnat formula-decl nil pred_gcd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (euclidean_gcd def-decl "posnat" pred_gcd nil)
    (gcd const-decl "bool" pred_gcd nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (euclidean_gcd_is_correct-2 nil 3712055025
   ("" (measure-induct "abs(m)+abs(n)" ("m" "n"))
    (("" (skeep)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "euclidean_gcd" -1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (hide -3)
                  (("1" (rewrite "gcd_abs")
                    (("1" (expand "gcd")
                      (("1" (replace -2 1 rl)
                        (("1" (replace -1 1 rl)
                          (("1" (prop)
                            (("1" (expand "divides")
                              (("1" (inst 1 1) (("1" (assert) nil)))))
                             ("2" (expand "divides")
                              (("2" (inst 1 1) (("2" (assert) nil)))))
                             ("3" (typepred "x_2")
                              (("3"
                                (case "x_2 = 0")
                                (("1" (hide +) (("1" (grind) nil)))
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "divides")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "abs(x_2)")
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (case
                                                 "NOT abs(x_2) = 0")
                                                (("1"
                                                  (replaces -2)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (case
                                                       "p = 0 OR x = 0")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil)))
                                                       ("2"
                                                        (prop)
                                                        (("2"
                                                          (lemma
                                                           "pos_times_le")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "p")
                                                                      (("2"
                                                                        (lemma
                                                                         "div_mult_pos_le1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "p"
                                                                           "x"
                                                                           "p")
                                                                          (("2"
                                                                            (rewrite
                                                                             "div_simp")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))))))))))))))))))))))
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (replaces -1 2 rl)
                      (("2" (replace -1 2 rl)
                        (("2" (hide -)
                          (("2" (expand "abs" 1 1)
                            (("2" (expand "gcd")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (inst
                                     1
                                     "IF x_1 < 0 THEN -1 ELSE 1 ENDIF")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil)
                                         ("2" (grind) nil)))))))))
                                 ("2"
                                  (expand "divides")
                                  (("2"
                                    (inst 1 0)
                                    (("2" (assert) nil)))))
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (expand "divides")
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (grind)
                                          (("1"
                                            (case "x!1 = 0")
                                            (("1" (grind) nil)
                                             ("2"
                                              (typepred "p")
                                              (("2"
                                                (lemma "neg_times_lt")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "-x!1"
                                                         "p")
                                                        (("1"
                                                          (rewrite
                                                           "div_simp")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil)))))))))
                                                     ("2"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("2"
                                                        (lemma
                                                         "div_mult_pos_lt2")
                                                        (("2"
                                                          (lemma
                                                           "div_mult_neg_lt2")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (lemma "pos_times_le")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (case "p = 0")
                                                      (("1"
                                                        (replaces)
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "div_mult_pos_le1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!1"
                                                           "p")
                                                          (("2"
                                                            (rewrite
                                                             "div_simp")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (case "p=0")
                                                  (("1" (grind) nil)
                                                   ("2"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("2"
                                                        (rewrite
                                                         "div_simp")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("3"
                                                  (typepred "p")
                                                  (("3"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("3"
                                                        (rewrite
                                                         "div_simp")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("4"
                                                  (typepred "p")
                                                  (("4"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("4"
                                                        (rewrite
                                                         "div_simp")
                                                        (("4"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("5"
                                                  (typepred "p")
                                                  (("5"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("5"
                                                        (rewrite
                                                         "div_simp")
                                                        (("5"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("6"
                                                  (typepred "p")
                                                  (("6"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("6"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("6"
                                                        (rewrite
                                                         "div_simp")
                                                        (("6"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))))))))))))))))))))
                 ("3" (replaces -1)
                  (("3" (assert)
                    (("3" (replace -1 2 rl)
                      (("3" (hide -)
                        (("3" (expand "gcd")
                          (("3" (prop)
                            (("1" (expand "divides")
                              (("1" (inst 1 0) (("1" (assert) nil)))))
                             ("2" (expand "divides")
                              (("2"
                                (inst
                                 1
                                 "IF x_2 < 0 THEN -1 ELSE 1 ENDIF")
                                (("2" (grind) nil)))))
                             ("3" (skeep)
                              (("3"
                                (expand "divides")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (replaces -1)
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("1"
                                              (typepred "p")
                                              (("1"
                                                (typepred "x")
                                                (("1"
                                                  (case "p=0")
                                                  (("1" (grind) nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (lemma
                                                       "neg_times_lt")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "-x"
                                                                 "p")
                                                                (("1"
                                                                  (rewrite
                                                                   "div_simp")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "-x"
                                                               "p")
                                                              (("1"
                                                                (rewrite
                                                                 "div_simp")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      -6))
                                                                    (("1"
                                                                      (case
                                                                       "x < -1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))
                                                                   ("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (case
                                                                       "x = 1")
                                                                      (("1"
                                                                        (replaces)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)))))))))
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))))))))))))
                                             ("2"
                                              (hide 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (lemma
                                                         "neg_times_lt")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "p=0")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil)))
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x=0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("3"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "pos_times_lt")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-
                                                                          8))
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p"
                                                                             "x"
                                                                             "p")
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_simp")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (case
                                                                                   "x=1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil)))))))))))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil)
                                                                       ("4"
                                                                        (grind)
                                                                        nil)
                                                                       ("5"
                                                                        (grind)
                                                                        nil)))))))))))
                                                             ("4"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_2)" "abs(x_1)" "k")
                                (("1"
                                  (prop)
                                  (("1" (rewrite "gcd_commutes") nil)))
                                 ("2"
                                  (hide-all-but (1 4))
                                  (("2" (grind) nil)))))))))))))))
                     ("2" (hide -2 5)
                      (("2" (typepred "rem(abs(x_1))(abs(x_2))")
                        (("2" (grind) nil)))))))))
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_1)" "abs(x_2)" "k")
                                (("1" (assert) nil)
                                 ("2"
                                  (hide-all-but (1 6))
                                  (("2" (grind) nil)))))))))))))))
                     ("2" (hide -1 6)
                      (("2" (typepred "rem(abs(x_2))(abs(x_1))")
                        (("2" (grind) nil)))))))))))))))
           ("2" (expand "euclidean_gcd" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3)
                  (("1" (typepred "x_2")
                    (("1" (case "x_2 = 0")
                      (("1" (replace -1)
                        (("1" (hide-all-but (-2 1))
                          (("1" (grind) nil)))))
                       ("2" (rewrite "gcd_abs" -3)
                        (("2" (replace -2 -3 rl)
                          (("2" (hide -1 -2)
                            (("2" (expand "abs" 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "gcd_posnat")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "gcd")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (inst -4 "-x_2")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               " pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         " both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "x"
                                                                           "1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (assert)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))
                                                       ("3"
                                                        (hide -3)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))
                                   ("2"
                                    (expand "abs")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "gcd_posnat")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "gcd")
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (hide -3)
                                                  (("2"
                                                    (inst -3 "x_2")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               "pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "1"
                                                                           "x")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (assert)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil)))))))
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))))))))))))
                 ("2" (hide -3)
                  (("2" (typepred "x_2")
                    (("2" (prop)
                      (("2" (replaces -1)
                        (("2" (assert)
                          (("2" (hide 3)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma "gcd_posnat")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gcd")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -5 "-x_1")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x>0")
                                                        (("1"
                                                          (lemma
                                                           "neg_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (case
                                                           "x = 0")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = -1")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x < -1")
                                                              (("1"
                                                                (case
                                                                 "k * x < -k")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "-1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (inst 1 "-1")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst 1 0)
                                                      (("3"
                                                        (assert)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (lemma "gcd_posnat")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "gcd")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (inst -3 "x_1")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x < 0")
                                                        (("1"
                                                          (lemma
                                                           "pos_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (case "x=0")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = 1")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x>1")
                                                              (("1"
                                                                (case
                                                                 "k < k * x")
                                                                (("1"
                                                                  (grind)
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil)))))))))
                                                               ("2"
                                                                (assert)
                                                                nil)))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (inst 1 1)
                                                        (("2"
                                                          (assert)
                                                          nil)))))))
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand
                                                       "divides")
                                                      (("3"
                                                        (inst 1 0)
                                                        (("3"
                                                          (assert)
                                                          nil)))))))))))))))))))))))))))))))))))))))))
                 ("3" (postpone) nil)
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -3)
                        (("1" (rewrite "gcd_commutes" -3)
                          (("1" (rewrite "gcd_mod" -3)
                            (("1" (assert) nil)))))))))
                     ("2" (hide -2 2) (("2" (grind) nil)))))))
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -2)
                        (("1" (rewrite "gcd_mod" -2)
                          (("1" (assert) nil)))))))
                     ("2" (hide -1 3)
                      (("2" (grind) nil))))))))))))))))))))
    nil)
   nil nil)
  (euclidean_gcd_is_correct-1 nil 3711729295
   ("" (measure-induct "abs(m)+abs(n)" ("m" "n"))
    (("" (skeep)
      (("" (skeep)
        (("" (prop)
          (("1" (expand "euclidean_gcd" -1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (hide -3)
                  (("1" (rewrite "gcd_abs")
                    (("1" (expand "gcd")
                      (("1" (replace -2 1 rl)
                        (("1" (replace -1 1 rl)
                          (("1" (prop)
                            (("1" (expand "divides")
                              (("1"
                                (inst 1 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides")
                              (("2"
                                (inst 1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (typepred "x_2")
                              (("3"
                                (case "x_2 = 0")
                                (("1"
                                  (hide +)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "divides")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "abs(x_2)")
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (case
                                                 "NOT abs(x_2) = 0")
                                                (("1"
                                                  (replaces -2)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (case
                                                       "p = 0 OR x = 0")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        (("2"
                                                          (lemma
                                                           "pos_times_le")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "p")
                                                                      (("2"
                                                                        (lemma
                                                                         "div_mult_pos_le1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "p"
                                                                           "x"
                                                                           "p")
                                                                          (("2"
                                                                            (rewrite
                                                                             "div_simp")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (replaces -1 2 rl)
                      (("2" (replace -1 2 rl)
                        (("2" (hide -)
                          (("2" (expand "abs" 1 1)
                            (("2" (expand "gcd")
                              (("2"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (inst
                                     1
                                     "IF x_1 < 0 THEN -1 ELSE 1 ENDIF")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "divides")
                                  (("2"
                                    (inst 1 0)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (expand "divides")
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (grind)
                                          (("1"
                                            (case "x!1 = 0")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (typepred "p")
                                              (("2"
                                                (lemma "neg_times_lt")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "-x!1"
                                                         "p")
                                                        (("1"
                                                          (rewrite
                                                           "div_simp")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "div_mult_pos_lt1")
                                                      (("2"
                                                        (lemma
                                                         "div_mult_pos_lt2")
                                                        (("2"
                                                          (lemma
                                                           "div_mult_neg_lt2")
                                                          (("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "pos_times_le")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (case "p = 0")
                                                      (("1"
                                                        (replaces)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "div_mult_pos_le1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!1"
                                                           "p")
                                                          (("2"
                                                            (rewrite
                                                             "div_simp")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "p=0")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("2"
                                                        (rewrite
                                                         "div_simp")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "p")
                                                  (("3"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("3"
                                                        (rewrite
                                                         "div_simp")
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (typepred "p")
                                                  (("4"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("4"
                                                        (rewrite
                                                         "div_simp")
                                                        (("4"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (typepred "p")
                                                  (("5"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("5"
                                                        (rewrite
                                                         "div_simp")
                                                        (("5"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (typepred "p")
                                                  (("6"
                                                    (lemma
                                                     "div_mult_pos_le1")
                                                    (("6"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x!1"
                                                       "p")
                                                      (("6"
                                                        (rewrite
                                                         "div_simp")
                                                        (("6"
                                                          (prop)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replaces -1)
                  (("3" (assert)
                    (("3" (replace -1 2 rl)
                      (("3" (hide -)
                        (("3" (expand "gcd")
                          (("3" (prop)
                            (("1" (expand "divides")
                              (("1"
                                (inst 1 0)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides")
                              (("2"
                                (inst
                                 1
                                 "IF x_2 < 0 THEN -1 ELSE 1 ENDIF")
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (expand "divides")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (replaces -1)
                                      (("3"
                                        (expand "abs")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("1"
                                              (typepred "p")
                                              (("1"
                                                (typepred "x")
                                                (("1"
                                                  (case "p=0")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (lemma
                                                       "neg_times_lt")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "-x"
                                                                 "p")
                                                                (("1"
                                                                  (rewrite
                                                                   "div_simp")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "div_mult_neg_lt1")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "-x"
                                                               "p")
                                                              (("1"
                                                                (rewrite
                                                                 "div_simp")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      -6))
                                                                    (("1"
                                                                      (case
                                                                       "x < -1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (case
                                                                       "x = 1")
                                                                      (("1"
                                                                        (replaces)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (lemma
                                                         "neg_times_lt")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "p=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x=0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "p=0")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "pos_times_lt")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-
                                                                          8))
                                                                        (("1"
                                                                          (lemma
                                                                           "div_mult_pos_lt1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p"
                                                                             "x"
                                                                             "p")
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_simp")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (case
                                                                                   "x=1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("5"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_2)" "abs(x_1)" "k")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "gcd_commutes")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 4))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 5)
                      (("2" (typepred "rem(abs(x_1))(abs(x_2))")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (lemma "gcd_abs")
                        (("1" (inst -1 "x_1" "x_2" "k")
                          (("1" (prop)
                            (("1" (lemma "gcd_mod")
                              (("1"
                                (inst -1 "abs(x_1)" "abs(x_2)" "k")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 6))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 6)
                      (("2" (typepred "rem(abs(x_2))(abs(x_1))")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "euclidean_gcd" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -3)
                  (("1" (typepred "x_2")
                    (("1" (case "x_2 = 0")
                      (("1" (replace -1)
                        (("1" (hide-all-but (-2 1))
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (rewrite "gcd_abs" -3)
                        (("2" (replace -2 -3 rl)
                          (("2" (hide -1 -2)
                            (("2" (expand "abs" 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "gcd_posnat")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "gcd")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (inst -4 "-x_2")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               " pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         " both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "x"
                                                                           "1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -3)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -3)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "abs")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "gcd_posnat")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "gcd")
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (hide -3)
                                                  (("2"
                                                    (inst -3 "x_2")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "x<0")
                                                            (("1"
                                                              (lemma
                                                               "pos_times_gt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x=0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "x>1")
                                                                  (("1"
                                                                    (case
                                                                     "k * x > k")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_times_pos_gt1")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "1"
                                                                           "x")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "divides")
                                                          (("2"
                                                            (inst 1 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "divides")
                                                          (("3"
                                                            (inst 1 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (typepred "x_2")
                    (("2" (prop)
                      (("2" (replaces -1)
                        (("2" (assert)
                          (("2" (hide 3)
                            (("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lemma "gcd_posnat")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gcd")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -5 "-x_1")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x>0")
                                                        (("1"
                                                          (lemma
                                                           "neg_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "x = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = -1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x < -1")
                                                              (("1"
                                                                (case
                                                                 "k * x < -k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "-1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (inst 1 "-1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst 1 0)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "gcd_posnat")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "gcd")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (inst -3 "x_1")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x < 0")
                                                        (("1"
                                                          (lemma
                                                           "pos_times_gt")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "x=0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "x = 1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "x>1")
                                                              (("1"
                                                                (case
                                                                 "k < k * x")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_times_pos_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "x"
                                                                       "1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "divides")
                                                      (("2"
                                                        (inst 1 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand
                                                       "divides")
                                                      (("3"
                                                        (inst 1 0)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (postpone) nil nil)
                 ("4" (inst -3 "rem(abs(x_1))(abs(x_2))" "abs(x_1)")
                  (("4" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -3)
                        (("1" (rewrite "gcd_commutes" -3)
                          (("1" (rewrite "gcd_mod" -3)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (inst -2 "rem(abs(x_2))(abs(x_1))" "abs(x_2)")
                  (("5" (prop)
                    (("1" (inst?)
                      (("1" (rewrite "gcd_abs" -2)
                        (("1" (rewrite "gcd_mod" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide -1 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (euclidean_gcd_OK 0
  (euclidean_gcd_OK-1 nil 3712056302
   ("" (skeep)
    (("" (lemma "euclidean_gcd_is_correct")
      (("" (inst?)
        (("" (inst -1 "euclidean_gcd(m, n)")
          (("" (assert)
            (("" (expand "gcd") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_gcd_is_correct formula-decl nil pred_gcd nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (euclidean_gcd def-decl "posnat" pred_gcd nil)
    (gcd const-decl "bool" pred_gcd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (slow_gcd_TCC1 0
  (slow_gcd_TCC1-1 nil 3712056570 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (slow_gcd_TCC2 0
  (slow_gcd_TCC2-1 nil 3712056570 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (slow_gcd_TCC3 0
  (slow_gcd_TCC3-1 nil 3712057228 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   nil))
 (slow_gcd_TCC4 0
  (slow_gcd_TCC4-1 nil 3712057228 ("" (termination-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_int_is_int application-judgement "int" integers nil))
   nil))
 (slow_gcd_is_correct 0
  (slow_gcd_is_correct-1 nil 3712056761
   ("" (measure-induct+ "abs(m)+abs(n)" ("m" "n"))
    (("" (skeep)
      (("" (prop)
        (("1" (expand "gcd" 1)
          (("1" (prop)
            (("1" (expand "slow_gcd" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (hide -3)
                    (("1" (replace -1 -2)
                      (("1" (hide -1)
                        (("1" (expand "divides")
                          (("1"
                            (inst 1 "IF x!1 < 0 THEN -1 ELSE 1 ENDIF")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3)
                    (("2" (hide 1)
                      (("2" (replaces)
                        (("2" (assert)
                          (("2" (expand "divides")
                            (("2"
                              (inst 1
                               "IF x!1 < 0 THEN -1 ELSE 1 ENDIF")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -3)
                    (("3" (replace -1)
                      (("3" (assert)
                        (("3" (expand "divides")
                          (("3" (inst 2 0) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (inst -3 "abs(x!2) - abs(x!1)" "abs(x!1)")
                    (("4" (inst?)
                      (("4" (prop)
                        (("1" (expand "gcd")
                          (("1" (prop)
                            (("1" (hide-all-but (-3 4))
                              (("1"
                                (expand "divides")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst
                                     1
                                     "IF x!1 < 0 THEN -x ELSE x ENDIF")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 5) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (inst -2 "abs(x!1) - abs(x!2)" "abs(x!2)")
                    (("5" (inst?)
                      (("5" (prop)
                        (("1" (expand "gcd")
                          (("1" (prop)
                            (("1" (hide-all-but (-2 -3 5))
                              (("1"
                                (expand "divides")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skolem -2 "y")
                                    (("1"
                                      (inst
                                       1
                                       "IF x!1 < 0 THEN -y - x ElSE y + x ENDIF")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 6) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "slow_gcd" -1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3 -1)
                    (("1" (expand "divides")
                      (("1" (inst 1 "IF x!2 < 0 THEN -1 ElSE 1 ENDIF")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide -3)
                    (("2" (replaces)
                      (("2" (expand "divides")
                        (("2" (inst 2 0) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -3)
                    (("3" (replace -1)
                      (("3" (assert)
                        (("3" (expand "divides")
                          (("3"
                            (inst 2 "IF x!2 < 0 THEN -1 ElSE 1 ENDIF")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (inst -3 "abs(x!2) - abs(x!1)" "abs(x!1)")
                    (("4" (inst?)
                      (("4" (prop)
                        (("1" (expand "gcd")
                          (("1" (prop)
                            (("1" (hide-all-but (-2 -3 4))
                              (("1"
                                (expand "divides")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skolem -2 "y")
                                    (("1"
                                      (inst
                                       1
                                       "IF x!2 < 0 THEN -y - x ElSE y + x ENDIF")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 5) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (inst -2 "abs(x!1) - abs(x!2)" "abs(x!2)")
                    (("5" (inst?)
                      (("5" (prop)
                        (("1" (expand "gcd")
                          (("1" (prop)
                            (("1" (hide-all-but (-3 5))
                              (("1"
                                (expand "divides")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst
                                     1
                                     "IF x!2 < 0 THEN -x ElSE x ENDIF")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 6) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (expand "slow_gcd" -3)
                (("3" (lift-if)
                  (("3" (prop)
                    (("1" (hide -5)
                      (("1" (typepred "x!2")
                        (("1" (replace -3 1 rl)
                          (("1" (hide -4)
                            (("1" (case "divides(p, abs(x!2))")
                              (("1"
                                (hide -5)
                                (("1"
                                  (lemma "divisor_smaller")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-4 1))
                                (("2"
                                  (expand "divides")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst
                                       1
                                       "IF x!2 < 0 THEN -x ELSE x ENDIF")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -5)
                      (("2" (typepred "x!2")
                        (("2" (replace -2)
                          (("2" (assert)
                            (("2" (hide -4 2)
                              (("2"
                                (case "divides(p, abs(x!1))")
                                (("1"
                                  (hide -4)
                                  (("1"
                                    (lemma "divisor_smaller")
                                    (("1"
                                      (replace -4 2 rl)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         1
                                         "IF x!1 < 0 THEN -x ELSE x ENDIF")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -5)
                      (("3" (typepred "x!2")
                        (("3" (replace -2)
                          (("3" (assert)
                            (("3" (hide -3 2)
                              (("3"
                                (case "divides(p, abs(x!2))")
                                (("1"
                                  (hide -4)
                                  (("1"
                                    (lemma "divisor_smaller")
                                    (("1"
                                      (replace -4 2 rl)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         1
                                         "IF x!2 < 0 THEN -x ELSE x ENDIF")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst -5 "abs(x!2) - abs(x!1)" "abs(x!1)")
                      (("4" (inst?)
                        (("4" (prop)
                          (("1" (expand "gcd")
                            (("1" (prop)
                              (("1"
                                (inst -4 "p")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-6 -7 1))
                                    (("1"
                                      (expand "divides")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skolem -2 "y")
                                          (("1"
                                            (inst
                                             1
                                             "IF x!1 < 0 THEN IF x!2 < 0 THEN -y + x ELSE  y + x ENDIF ELSE  IF x!2 < 0 THEN -y - x ELSE y - x ENDIF ENDIF")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (expand "divides")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           1
                                           "IF x!1 < 0 THEN -x ELSE x ENDIF")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 -4) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (inst -4 "abs(x!1) - abs(x!2)" "abs(x!2)")
                      (("5" (inst?)
                        (("5" (prop)
                          (("1" (expand "gcd")
                            (("1" (prop)
                              (("1"
                                (inst -4 p)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-5 -6 1))
                                    (("1"
                                      (expand "divides")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skolem -2 "y")
                                          (("1"
                                            (inst
                                             1
                                             "IF x!1 < 0 THEN IF x!2 < 0 THEN -x + y ELSE -x - y ENDIF ELSE  IF x!2 < 0 THEN x + y ELSE x - y ENDIF ENDIF")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (expand "divides")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           1
                                           "IF x!2 < 0 THEN -x ELSE x ENDIF")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "slow_gcd" 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (hide -3)
                (("1" (expand "gcd")
                  (("1" (prop)
                    (("1" (inst -4 "abs(x!2)")
                      (("1" (prop)
                        (("1" (hide -3)
                          (("1" (case "divides(k, abs(x!2))")
                            (("1" (hide -4)
                              (("1"
                                (lemma "divisor_smaller")
                                (("1"
                                  (inst -1 "k" "abs(x!2)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "x!2")
                                      (("1"
                                        (hide -3)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 1))
                              (("2"
                                (expand "divides")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF x!2 < 0 THEN -x ELSE x ENDIF")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (expand "divides")
                            (("2" (replaces -1)
                              (("2"
                                (inst
                                 1
                                 "IF x!1 < 0 THEN -1 ELSE 1 ENDIF")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (expand "divides")
                            (("3"
                              (inst 1
                               "IF x!2 < 0 THEN -1 ELSE 1 ENDIF")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (replace -1)
                  (("2" (assert)
                    (("2" (expand "gcd")
                      (("2" (prop)
                        (("2" (inst -4 "abs(x!1)")
                          (("2" (prop)
                            (("1" (hide -4)
                              (("1"
                                (case "divides(k, abs(x!1))")
                                (("1"
                                  (lemma "divisor_smaller")
                                  (("1"
                                    (inst -1 "k" "abs(x!1)")
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         1
                                         "IF x!1 < 0 THEN -x ELSE x ENDIF")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "divides")
                                (("2"
                                  (inst
                                   1
                                   "IF x!1 < 0 THEN -1 ELSE 1 ENDIF")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (expand "divides")
                                (("3"
                                  (inst 1 0)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -3)
                (("3" (replace -1)
                  (("3" (assert)
                    (("3" (expand "gcd")
                      (("3" (prop)
                        (("3" (inst -4 "abs(x!2)")
                          (("3" (prop)
                            (("1" (case "divides(k, abs(x!2))")
                              (("1"
                                (lemma "divisor_smaller")
                                (("1"
                                  (inst -1 "k" "abs(x!2)")
                                  (("1"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-4 1))
                                (("2"
                                  (expand "divides")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst
                                       1
                                       "IF x!2 < 0 THEN -x ELSE x ENDIF")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "divides")
                                (("2"
                                  (inst 1 0)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (expand "divides")
                                (("3"
                                  (inst
                                   1
                                   "IF x!2 < 0 THEN -1 ELSE 1 ENDIF")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (rewrite "gcd_abs" -2)
                (("4" (lemma "gcd_abs")
                  (("4" (inst -1 "abs(x!2)" "-abs(x!1)" "k")
                    (("1" (rewrite "abs_abs")
                      (("1" (case "abs(-abs(x!1)) = abs(x!1)")
                        (("1" (replace -1 -2)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (rewrite "gcd_plus" -1)
                                (("1"
                                  (lemma "gcd_abs")
                                  (("1"
                                    (inst
                                     -1
                                     "abs(x!2) - abs(x!1)"
                                     "-abs(x!1)"
                                     "k")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -5 -2)
                                        (("1"
                                          (expand "abs" -2 1)
                                          (("1"
                                            (hide -1 -3 -4)
                                            (("1"
                                              (inst
                                               -5
                                               "abs(x!2) - abs(x!1)"
                                               "abs(x!1)"
                                               "k")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but
                                                   (-3 1 3 4 5))
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "abs(x!2) + -abs(x!1) = abs(x!2) - abs(x!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "gcd_commutes" -3)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (rewrite "gcd_abs" -1)
                (("5" (lemma "gcd_abs")
                  (("5" (inst -1 "abs(x!1)" "-abs(x!2)" "k")
                    (("1" (rewrite "abs_abs")
                      (("1" (case "abs(-abs(x!2)) = abs(x!2)")
                        (("1" (replace -1 -2)
                          (("1" (assert)
                            (("1" (rewrite "gcd_plus" -2)
                              (("1"
                                (lemma "gcd_abs")
                                (("1"
                                  (inst
                                   -1
                                   "abs(x!1) - abs(x!2)"
                                   "-abs(x!2)"
                                   "k")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "abs" -2 1)
                                      (("1"
                                        (replace -3 -2)
                                        (("1"
                                          (hide -1 -4 -5)
                                          (("1"
                                            (inst
                                             -3
                                             "abs(x!1) - abs(x!2)"
                                             "abs(x!2)"
                                             "k")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide -1 3)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_abs formula-decl nil real_props nil)
    (gcd_plus formula-decl nil pred_gcd nil)
    (gcd_commutes formula-decl nil pred_gcd nil)
    (x!2 skolem-const-decl "{n | NOT x!1 = 0 OR NOT n = 0}" pred_gcd
     nil)
    (x!1 skolem-const-decl "int" pred_gcd nil)
    (gcd_abs formula-decl nil pred_gcd nil)
    (divisor_smaller formula-decl nil divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (p skolem-const-decl "int" pred_gcd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (divides const-decl "bool" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slow_gcd def-decl "posnat" pred_gcd nil)
    (gcd const-decl "bool" pred_gcd nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (slow_gcd_OK 0
  (slow_gcd_OK-1 nil 3712075175
   ("" (skeep)
    (("" (lemma "slow_gcd_is_correct")
      (("" (inst?)
        (("" (inst -1 "slow_gcd(m, n)")
          (("" (assert)
            (("" (expand "gcd") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((slow_gcd_is_correct formula-decl nil pred_gcd nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slow_gcd def-decl "posnat" pred_gcd nil)
    (gcd const-decl "bool" pred_gcd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

